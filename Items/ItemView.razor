<style>
    pre {
        background-color: transparent;
        line-height: normal;
        border-width: 0;
        font-size: 1em;
        font-weight: bolder;
        color: @SiteInfo.TextColor;
    }

    .song_Div span, p, div, br {
        font-size: 1em;
        font-weight: bolder;
        color: @SiteInfo.TextColor;
        font-family: Georgia, 'Times New Roman', Times, serif;
    }

    .song_Div .c {
        font-size: 1em;
        color: @SiteInfo.AccentColor;
        display: @show_chords;
    }

    .song_Div .title {
        color: @SiteInfo.AccentColor;
        font-weight: bolder;
    }
</style>
<div>
    <div style="display:grid; grid-template-columns:@autoSide auto 1fr; margin-top:15px;">
        <div style="margin-top:15px;">
        </div>
        <div class="song_Div" id="printer_div" style="margin-top:8px;  zoom:100%;">
            <div>
                @if (Item != null)
                {
                    if (AsViewer)
                    {
                        <div style="margin-left:0px; margin-bottom:15px;">
                            <h3 style="text-align:center; color:@SiteInfo.AccentColor; font-weight:bolder; margin-bottom:0;">@Item.Title</h3>
                        </div>
                    }
                    else
                    {
                        <div @onclick="@(()=>{ChristianSongs.Blazor.Shared.MainLayout.Current.NavigateToViewer(Item);})" style="margin-left:0px; margin-bottom:15px; cursor:pointer;">
                            <h3 style="text-align:left; color:@SiteInfo.AccentColor; font-weight:bolder; margin-bottom:0;">@Item.Title ►</h3>
                        </div>
                    }
                }
            </div>
            <div>
                @DataContent
            </div>
            @if (AsViewer == false)
            {
                <div style="display:flex; margin-top:20px;">
                    <div style="height:1px; min-width:350px; background-color:gray;"></div>
                    <h4 @onclick="NavigateToEdit" style="text-align:right; margin-right:25px; cursor:pointer;  margin-top:-10px;">✏️</h4>
                </div>

            }
        </div>
        <div>
        </div>
    </div>

    @if (ShowYoutube && Item != null)
    {
        @if (Item.YoutubeUrl.IsValidString())
        {
            <div style="margin-left:10px;">
                <ChristianSongs.Blazor.Items.PlayButton Item="@Item"></ChristianSongs.Blazor.Items.PlayButton>
            </div>
        }
    }
    @if (ShowList)
    {
        <div>
            <SongsListView TotalItems="Items"></SongsListView>
        </div>
    }

</div>
@code {
    List<ProjectItem> _items = new List<ProjectItem>();
    [Parameter]
    public List<ProjectItem> Items
    {
        get { return _items; }
        set
        {
            if (value != null)
            {
                _items = value;
                StateHasChanged();
            }
        }
    }
    MarkupString dataContent;

    [Parameter]
    public MarkupString DataContent
    {
        get { return dataContent; }
        set
        {
            if (value.Value.IsValidString())
            {
                dataContent = value;
                StateHasChanged();
            }
        }
    }
    bool _asViewer = false;
    [Parameter]
    public bool AsViewer
    {
        get { return _asViewer; }
        set
        {
            _asViewer = value;
            if (value)
            {
                ShowList = false;
                ShowChords = false;
                ShowYoutube = false;

            }
        }
    }
    [Parameter]
    public bool ShowYoutube { get; set; } = true;
    [Parameter]
    public bool ShowList { get; set; } = true;
    protected override void OnInitialized()
    {
        base.OnInitialized();

    }
    ProjectItem _item = null;
    [Parameter]
    public ProjectItem Item
    {
        get { return _item; }
        set
        {
            if (value != null)
            {
                _item = value;

                if (DirectLong == false)
                {
                    DataContent = (MarkupString)value.Data;
                }
                else
                {
                    if (Item.DataLong.IsValidString())
                    {
                        DataContent = (MarkupString)value.DataLong;
                    }
                    else
                    {
                        DataContent = (MarkupString)value.Data;
                    }
                }
            }

        }
    }
    public bool DirectLong { get; set; }
    #region ShowChords
    bool _showChords = false;
    [Parameter]
    public bool ShowChords
    {
        get { return _showChords; }
        set
        {
            _showChords = value;
            if (value)
            {
                show_chords = "block;";
            }
            else
            {
                show_chords = "none;";
            }
        }
    }

    string show_chords = "none;";
    #endregion
    string autoSide = "1fr";
    bool putCenter = true;
    [Parameter]
    public bool PutCenter
    {
        get { return putCenter; }
        set
        {
            putCenter = value;
            if (value)
            {
                autoSide = "1fr";
            }
            else
            {
                autoSide = "auto";
            }
            StateHasChanged();
        }
    }
    async void Print()
    {
        await JS.InvokeVoidAsync("printDiv", "printer_div");
        //await JS.InvokeVoidAsync("printInvoke");
    }
    public void NavigateToEdit()
    {
        ChristianSongs.Blazor.Shared.MainLayout.Current.NavigateToSubmitForm(this.Item);
    }

}
